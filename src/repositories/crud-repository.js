const { where } = require("sequelize");
const { Logger } = require("../config");
const AppError = require("../utils/errors/app-error");
const { StatusCodes } = require("http-status-codes");

class CrudRepository {
  constructor(model) {
    this.model = model;
  }

  async create(data) {
    const response = await this.model.create(data);
    return response;
  }

  async destroy(data) {
    const response = await this.model.destroy({
      where: {
        id: data,
      },
    });
    if(!response){
      throw new AppError("The id you requested is not present", StatusCodes.NOT_FOUND)
    }
    return response;
  }

  async get(data) {
    const response = await this.model.findByPk(data);
    if(!response){
      throw new AppError("The id you requested is not present", StatusCodes.NOT_FOUND)
    }
    return response;
  }

  async getAll() {
    const response = await this.model.findAll();
    return response;
  }

  async update(id, data) {
    const response = await this.model.update(data, {
      where: {
        id: id,
      },
    });
    if(!response[0]){
      throw new AppError("The field you requested is not present", StatusCodes.NOT_FOUND)
    }
    return response;
  }
}

module.exports = CrudRepository;

// these are some function that are automatically generated by sequelize on the go to make programing easy like by seleecting the row which is the primary key in another table we can use rowdata.create[tablename](data);
// SELECT * 
// FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE 
// WHERE TABLE_NAME = 'flights' 
// AND CONSTRAINT_SCHEMA = 'flights';
//  const { City, Airport } = require('./models’);

// const bengaluru = await City.findByPk(1, {include: {model: Airport}})
// console-log(bengaluru);

// const airport = await Airport.create({name: ‘Kempegowda Airport’, code:"kmr"})
// const dbpairport = await bengaluru.createAirport({name: ‘Huballi Airp", code:"hb"})
// console. log(dbpairport);

// const airportsInBlr = await bengaluru.getAirports();

// console.log(airportsInlr);

// const hbairport = await Airport.findByPk(3);

// console. log(hbairport);

// await bengaluru.removeAirports(hbairport);

// const mumbai = await City. findByPk(2);

// const sh = mumbai.createAirport({name: "CSI airport’, code: 'MUM'D);
// await City.destroy({
// where: {
// id: 2
// }
// })
// const sh = await Airport. findByPk(2);
// mumbai. removeAirport (sh)
// const city = await City. FindByPk(4);
// await city.createirport({name: ‘Indore airport’, code: 'IND'});